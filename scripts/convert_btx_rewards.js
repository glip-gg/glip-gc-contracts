var transactions = require('./btx_playtest_rewards.json');

const { ethers } = require("hardhat");
const hre = require("hardhat");

let airdropAbi = [
    {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "users",
            "type": "address[]"
          },
          {
            "internalType": "uint256[]",
            "name": "amounts",
            "type": "uint256[]"
          }
        ],
        "name": "airdrop",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "users",
            "type": "address[]"
          }
        ],
        "name": "convert",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      }
]

let tokenAbi = [
    {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "rewardBalanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
]

// 505 -> 1505 -> done
// 1505 -> 2000 -> done
// 2000 -> 2500 -> done
// 2500 -> 3000 -> done
// 3000 -> 3500 -> done

let index = 11000;
async function main() {

  const [deployer] = await ethers.getSigners();
  console.log("Deploying contracts with the account:", deployer.address); 

  const airdropContract = new ethers.Contract('0x4dB76A9efaf4a9d40BceF0590B145D101e866E0B', airdropAbi, deployer);
  const tokenContract = new ethers.Contract('0xf0075b06b4229c20b7c22b7e63d90723b3551861', tokenAbi, deployer);

  let filtered = transactions.filter((tx) => {
    return tx.amount >= 20
  }).slice(0)

  let uniqueAddresses = []
  let addressToBalance = {}
  let totalAmount = 0

filtered.forEach((tx) => {
    totalAmount += tx.amount
    if (addressToBalance[tx.wallet]) {
        addressToBalance[tx.wallet] += tx.amount
    } else {
        addressToBalance[tx.wallet] = tx.amount
    }
})

let finalArray = []

try {

    let totalConversion = 0
    Object.keys(addressToBalance).forEach((address) => {
        console.log(address)
        let finalMapping = {}
        finalMapping.amount = addressToBalance[address]
        finalMapping.address = address
        finalMapping.gc = parseInt(filtered.find((tx) => tx.wallet == address).gc)
        totalConversion += finalMapping.gc
        finalArray.push(finalMapping)
    })
    
    console.log(finalArray)
    console.log('total gc conversion', totalConversion)
    console.log('addresses', Object.keys(addressToBalance))

} catch (e) {
    console.log(e)

}



let addresses = Object.keys(addressToBalance)

let finalAddresses = ["0x085364C42d888092C1b34481fC3eCb46c195CBE6","0xD22c056868015e3E5D3084a56C11dD77037E9770","0xF039541aDD719bE7FC0c2817DF31552a27dfCBC4","0xEAAb0B72BCe09650c99B5342c0794b09c02d34Aa","0xbd68a6937DABcC7892D56C0EB3aa3e338E5720e6","0x6898024EFD10076bF6E2480ceee76596F60E8fdE","0xbA4FFee9878934aF23666B0f938A9C64EC38d983","0x81a0c83A83c696aEb5325D9895323fc58cf265D7","0x73AA0C08A100F94D431db8B5f2AB6509B439883D","0xe7c9E0B3592f12F3C0ceC5812B4C24A424f545D5","0x1e03504Ab2adC6c5432148D7609F946e72357A48","0x9D791C4d6487Db2f79AEB0595d3d311F173a05AA","0xf74B9a2fc1e881C45FBBe0C14c9e15608e9CC9E6","0xE7763346C66c2BA37B1Da209DDd1384F9DbB8cf4","0xE43cC942E9201F396EcEcd1d66ad0AF26De3bbe1","0xB48Bb2fdCbe9fF8744922B32Fe29d429840c720A","0x0499630bf74a8db8b199E61B301b94E52Dda8Dd4","0xA30300D219F84ee5CD3813b4e244B2eBbd64332e","0x050DD1cFd5E439352f91941f345E57471788d9ea","0x88eedf70535dBfe71f6Af7BFCBc71d6c7733cE74","0x176FDd0c60f8481deb01473dEE82303ED06c3F37","0xf13bEC621743b2129B9467e31356b644606f6f31","0x9f8f7E6b2A3Cc0640D728E0C70043A6b5c65E8c2","0x38ae9d9Ff52A346b2B3F8C15754b1EB9E855d522","0x270c7434cba9e95992bA5ab5227682F81c7567D6","0x0FbC2d090c646Fb9646b2810bD033eEDd10359fD","0x53A884b07EE85d3E13F91A6309Af181Bd1926085","0xa68a1A59433209b0ec9A35612898F5e504b8fEF9","0x4139E11fE35Ab408799eBFf05FAd4DF6e8fA8e42","0x75208B4fe84769C1705ef16aA8aE014e5a498673","0x4832131CBf9E71c64F71c547bd55fb33E76C37c8","0xbd0B6433A45635B0B9535ae2eF91b972B68184eC","0x69e098d67FC120eD5a407B4cA11EFE4127f7a308","0xf26b8193ae69bb1457EC55A7D034D7374a0178bE","0x4913Dd1fE64B67FFCd0Eb8569Fb4BAa55F4979fd","0xb2E1a65d0919B0138Ee467FDb5db95EF7B1CB767","0x35e1c6AE5099513395e9fFCc602716DBB744e5cc","0xE4adb545fa620295850dab9b7c49272909fC4Bc6","0x5073eD3B82CA8683641AC49c026cAF5254f4ecf8","0x3E6c156D39929f3baA1A79217c376566AF9C3C70","0x5eDb30F60c4dE6Ff4F7369523fC6e0A3C8687093","0xb1513EB22B32b44BCafc8fe08a5ab7D2Afccc3f5","0x295D78bC86C7Ea52f31F360BD8fCF67252Fe9142","0xc6be0597275214F06224968F386CF50A3B94DBA4","0x57E802CC936A0e080baD19ba66cc52EEB120DA4B","0x961cAfc4C79F6FF60462b67f7c41A23724B2E041","0xC5bC690ec46630b037F2f13D85CA7e66E89ac89b","0x175949E615Df93a52A061cDE0f7E20dF6D6F7dB5","0xbd237aaa1E2fD1BDe9d4b118E7C00EE578a21d6D","0xa7E2d1B35bdcFDfA9fbD783Eaf714552E15a7470","0xDc821dDAf4c75b85F741A22051471f021BeD7Ccb","0x0c73A92DCe33DF7cA9889b486D12D526a49Ca8C4","0x48FaDe198dAaC98236E6FaeF4921f233A755D4a2","0xB56A45a40601828e6a97A778c297B5762B3c6332","0xB99CD025aDa959667a633754a79754900e429C54","0xF40AB2A7412cBC7CC015e441757dc365dfd34C21","0x7617335b4C1AdCDd7f0baC48Ae545Ed506965b04","0xB99097Ce93BE15215085B63bA9c328D2983e6FbA","0xe52944487fd68651800F7DA15fCA8dAe9A99C335","0x8ce8235a80c07B83e5c2ac1D91262FceEA45F5E1","0xf2d1c75fe79a78a1ADD9353B6C3949Ce863D50fE","0xc42996E760E49DC1d8CC325945f970373019a67D","0x01a236F4c87Bf4D6E659c81D3Bcfd3423c2cAd1d","0xABd680fBA36C9A7F7950D539Ec377086d29483Fb","0x2e3f908534776Bc1c18D256805FA3634DEB933C7","0xF1983F5ba165D6B1f73c601a7beE23Ca3846549d","0x2C2c0e4e5C34270eFc1308d75aA35DA78353e7cA","0x5e7eABB5a20d1a9C975DbDA16c5AA2DF00382dEd","0x3768CB7eA2805945381140E5A59dbEC6E577a408","0xBe47430Db382Eb50c8eD6F71488E0d740FaFdEFF","0x96f9bE0D17D6F40791D4f45250967F0E21acE7eE","0x6Fccc745047BFF00dAAe024dFCC7299E178023dD","0xCd046252BE418AB23182316cF5AFD5e54b6D9E4B","0xc4cFe47e62190913BEB999817dd1ef8d83b7f5D7","0xAc36d7e0a2506e72C3e0e9881cC590d659445820","0xD1F2126ceA518857Fdb47887F7567BB1bC75e2C5","0x8d98822e5C0EB03b13d1A71eFfe9A0a7fba7635B","0xf1F2B7F1bd54225be635c28f6B4cbf36e522928F","0x6DA8aa9aDE192909C0B1E6a86132E966486d198f","0xDd60d934948dd66fA690ff617555049A76BbC06d","0xB256d51D94d6b931Fd2b0101405f4CB58d8952F9","0xE653c1080200B71e47A3Df0222Abd3E855DD1732","0xa3Ea8bf026a0D9f00A87DC4f92b39508306d22E9","0x3c9FAD83A504154c984218a2831056EB5991Ed64","0x62443d485aC7576e04ACC6c93Cd786A45e26c090","0xE09c330A4C2F0a5a114BD0D6CfB92D26a705C7BB","0x2222792b5eB65A9Ab7F8b77124a0fa452F18A447","0x8967530Acfe93c219F320AcF79ea8DD0358Cb1cd","0x7dd65008A0d2093E21944d908AB7dDb05042acF0","0xcBc66DE6d29a41A57ff068B614461816CE30b73D","0x2D65183ab618fF47F02b2763A47ACab88377Eb6B","0x238fA36d5ECFEeA4c6C571C7dBD07aa56A4f3f15","0x36638FFc7F24E8B5A25a712e2766607bEf656554","0x4B475bd1A7dFefCBC3C5E5e9a0964d5f024E2d8d","0x8DA4fb641E14E567c5305e295a0b6CE454B9824b","0xC0416E815fE467006e7e433dfFD8b9E37ff13541","0x79FBFFA0f178A65eD70D328DdF8D748884709538","0xa2d05212E16755c3ddf36D0B1327812869002954","0xfD38Ae285Ef0d567cFeeeEd79c6bAB4Fe33E1cca","0x8fB8fE4401B374D30C868015F0950802E4491B9E","0x518Bf313fEbD681F42245325004102071AE47429","0xeEf5701531d18A08A467C1294A2e5500f20c28e1","0x1a7C7BE8fAa256D26A89eb431E2Ad1e33a83f0A3","0x7525077B56f3a0Ee17b25e235934742B8c63e4A1","0xCAf23389EB9b74dee4776d802486564e7722681d","0x24D3E7298B61C0B0D73DEEaCccCdBF6bD45b09E4","0x3eE7e6830970FBAD5d46bD17c0304aCcc8Ec0700","0x19E130ad6466770b767D545c5bC6eCEaf8781600","0x20D92991f9Fc5B758cd2eE0917b011D3Af307Bfc","0x3AC32a59c7766f3770e8E7d9510B87a3B20FFe85","0x963C3d05F17CA5C51e9D2D7691A2E52Fc98541df","0xE4ceE5ef08e7dB3bCC17D16b19C24d72f710B10B","0x44241A9522aE527b60531F618CA28e0d1BC099a2","0x01bE630aA357b0916205E7cA1EDC1164Fb743568","0x5Af623109009A170c4EE07A09f79D7cC8a942DDA","0xa854b87eCF534c64b51eA7971f7C09169EBD9efA","0x8a86484FeF39E958aC0aDFAdC261a626Bb0791ea","0xf712a6DE6de8992603Df81D77ea0397a0D0BFD7C","0x4E6037ec88acf1133A50dCcAD52Ac4BC6125E157","0x9249a149e35a83A39877738C9686396ee9156f49","0xAc1B0c4b8d32569c6ce8468D0beCAbc9Df43d39e","0xb63f54A532c69Eee779343245d936F75b3EDF1e3","0x63F9b0f1F4ED25C4F82a8A9731eec07363458818","0xa27DB7Bd0be34c47e713e166f1F70Ba7CDd4bF34","0x6f5b158F7C0E62B42557E506530E8e92F9be3b60","0xefeE129b13af8FC3A5a0e2A9c7aedF7cD152185E","0x91124FDBbEd05f57b832643c73a78F10885CF5F1","0x93afB0C013bD246504AD2fb3A7e308492c872563","0x311f3f8AfB6d3eD3682B21377A1BCbb2B8ab7c62","0x66Ca1b23bf1c27daEaA33D54E2358fC1D1dD999c","0x7B64bCbF31fc569Cc963080E3AE27EEee63149A5","0x5f005428C8833d55A1B528b91500C7474750B956","0x69ba1924bF2BDAA0E6C8799dE093f70DCb334697","0xB39997693F17b5AA544DAD7Df8eC681075ab7D0b","0xC8639AD59E307B1154664498528549bDa7039c34","0xb727FB29a89E24f416B130483681BbEa00b7a677","0x020776260bb6730138b72612d602b28de5c0f53b","0xECaa6AEC0F7264A350441E8399Cb79D927D74964","0x706Fb95E9C6CD4A15f38dF8307369273BFB4a682","0x3b902c43B5e133e05Cbe653eCA7da1931ED1Ee3B","0x8b1C0Ce9F6681e83e38b51BBa135519814CC4ca1","0xb3d4336255f185505B682F2410da499D26a0ffC5","0xFF27A1128eBcD9921b3b85661c2423FE7B6c6aAE","0xB69046d40Ec2d808a3718D346AD7D020dd8FDEaf","0x06fcfFd86D5eC45dC48e9658229241D98a92c064","0x1538a14ed0FEA090f32CD7Dd88645cb51570e8e4","0x3cCCF77E88A102D80B0b3EF815654c84e6edAd4F","0xBC62E4fe11Ee834b52332B20fa398FD557Eb2fD0","0xEc9470240972A8E8BdE6E882227adaA1489cd7Ba","0x962a99cE524413284857E77F04603619D80258DD","0xff7622A7D0a9D1BF3f72a9E8df9faD8Ce8892829","0xe66745c114DA248e16ea4D629c65171BC0aBa3c9","0x6bC4a9a93022161e1048135339951356654dc9Db","0x740109634DAC471238B375Dc6bBf02273513c104","0xa1488879fCF2a24E36158CaE6aF825fD7Fb34835","0x67888F2cec2d6dB5F0ec051BA76D4f0671468d16","0x54081684F431336992a4b7c934736a5479FEC962","0x7297F549a843FfE4444419dE2f82E13B1AE4A42a","0xEEB3A02e25Bba6217F6A2d49c2664935B595809a","0x5eD5A96018625C94032F98a6318A15c846B0dfe3","0x424e1043C5082bCb879B6730Db6F9032E245a44C","0x8B827E607b7D7A09166EC4745298EdA17B96C454","0x0ce0570fCEd058b7A43e0c96B7dd5Db0B8663834","0x210e90AcE0A72b1e21884b8d5DBaa0f7459767C8","0x25E18b3b9ca3a0c543dBa95F6d4BF611b0fE4b72","0x2E80cDCeDF75a72783b32ef463a42033FC595Df8","0x38ea293dff6756BCCFf24f550E91aB7A8Ef02e0A","0x7Fa39DF5aB5376CE18A5A5e688ADF5FdfBf053AC","0xc0E8840671021c689cCCa5A1FFbcfCE5BC3C331F","0xf90d115ED4D0c77cdC3BcbA762179105d20f8B93","0x0EB6742B33eb2187AC3a04C3947DECa03113EEcD","0x6a521963Ba5f7688830b1541e25514e0838CEb1f","0x02521c32825B77cDE13518138c8A217338A18323","0xC1B58a29087FbFf7dE54aD8f69CfE66b9Cb4d46a","0x92cc0803Dc0F37f1C28c7B519DB1bAb481887C1f","0x7C3a780FF97f1Cd2D84738e8790F7b52aff249AE","0xaed4CC2775a8FAf16b761255F52A0b046Df1E743","0x231868a5F1e491abF61Adf74e5A512e3a8da8D84","0xecc3CB1bfDB38c2438242cD6D1F5889f5DBFc35c","0x13b041e4dF33D4c62617A3cCC97436A3D02051B5","0x240870fDD0F98B3882221d79A0881851f21E16c9","0xCbb6001b5E9CA7Bc2bA91eb2eBCFfF0C156BC5DF","0x79Ec19D06B090d02695005F551dBda2f5BD20F1f","0x3028735a8b88484d2Fe37B60c2e74e1A8EeAc992","0x2ADf14168B0Ec99a753e6650fDF10F8B00617E26","0x10b766BE4a3FCAf74771d879f51e08c430Dc54Ae","0x5f381223FD40e3e6666bF3ad50d9835bB0570aFB","0x02a9DC67B4c4801cD8Ad6703952DDb468F3417cc","0x22922e5dD988924Cd56c03104FA5e517Df98FE8b","0xfF768AE0a69004bBF55D9aA4d7ed70E6381DcA2D","0x0FC940dcF083281eB43968e87481A11189FB4423","0x4e18128083b65454eBad328BEdc30d71aEED4554","0x61115798ADB74Eb24F6422517c83F455391234fc","0x6E424431b8211eBf696C60C4eE44d17B675f6C29","0x8107718EF1e6aFcC5ce6A72473385cABF05d4Ff0","0xb711965172dD02A8754dEA343060a0dD0EbC6e4D"]

  try {

    // console.log(addresses)
    // console.log(addresses.length)

    // for (let i = 0; i < addresses.length; i++) {
    //     let address = addresses[i]
    //     console.log(address)

    //     let rewardBalance = await tokenContract.rewardBalanceOf(address)
    //     if (rewardBalance > 0) {
    //         console.log('has balance', address)
    //         finalAddresses.push(address)
    //     } else {
    //         console.log('no balance', address)
    //     }
    // }


    // console.log(JSON.stringify(finalAddresses))
    console.log(finalAddresses.length)
    let tx = await airdropContract.convert(finalAddresses);
    console.log(tx)

  } catch (e) {
    console.log(e)
  }

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});
